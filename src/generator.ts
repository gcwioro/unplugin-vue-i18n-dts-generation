import type { DtsContentParams } from './types'
import { getJsonLeafPaths, canonicalize } from './utils/json'
import { defaultTransformKeys } from './utils/keys'
import { fnv1a32 } from './utils/hash'

/**
 * Create .d.ts content. Keeps it tight, deterministic, and TS-friendly.
 */
export function toDtsContent(params: DtsContentParams): string {
  const {
    messagesForBaseLocale,
    supportedLanguages,
    banner,
    transformKeys,
  } = params

  // Derive leaf paths
  const allKeysRaw = getJsonLeafPaths(messagesForBaseLocale)
    .map((p) => p.replace(/\.body\.cases$/g, ''))

  const finalKeys = (transformKeys ?? defaultTransformKeys)(allKeysRaw)

  // Canonicalize the base-locale object to make JSON stable across runs/platforms
  const canonicalBase = canonicalize(messagesForBaseLocale)

  // Deterministic banner (no timestamps). Include a small content hash for traceability.
  const messagesJson = JSON.stringify(canonicalBase)
  const languagesTuple = `['${supportedLanguages.join(`', '`)}']`
  const contentId = fnv1a32(languagesTuple + '|' + finalKeys.join('|') + '|' + messagesJson)

  const autogenerated =
    (banner ??
      `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by unplugin-vue-i18n-dts-generation (deterministic)
// Content-Hash: ${contentId}
`)
  // Normalize to LF and ensure trailing newline
  const NL = '\n'

  // We export three things:
  // - _SupportedLanguages (tuple)
  // - AllTranslationKeysGen (union of string literals)
  // - AllTranslationsGen (shape of the base-locale messages)
  // Note: we intentionally keep SupportedLanguagesGen identical to your original type (tuple type).
  // If you want a union, you can additionally use SupportedLanguageUnionGen.
  const body =
    `declare const _SupportedLanguages: readonly ${languagesTuple}
const _messages = ${messagesJson} as const
export type AllTranslationKeysGen = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}
export type SupportedLanguagesGen = typeof _SupportedLanguages
export type SupportedLanguageUnionGen = typeof _SupportedLanguages[number]
export type AllTranslationsGen = typeof _messages
`

  // Force POSIX newlines, single trailing newline
  return (autogenerated + body).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/,'\n')
}