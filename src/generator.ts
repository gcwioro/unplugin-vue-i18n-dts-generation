import type {DtsContentParams, JSONObject, JSONValue} from './types'
import {canonicalize, getJsonLeafPaths} from './utils/json'
import {transformKeys} from './utils/keys'
import {fnv1a32} from './utils/hash'

/**
 * Create .d.ts content. Keeps it tight, deterministic, and TS-friendly.
 */
export function toDtsContent(params: DtsContentParams): string {
  const {
baseLocale,
    messages,

    supportedLanguages,
    banner,

  } = params

  const messagesForBaseLocale = {...messages, ['en-US']: messages?.['en']??messages?.['en-US']??{}}
  // Derive leaf paths
  const messagesWithUsEn = (messages?.[baseLocale] ?? Object.values(baseLocale)[0])  as Record<string, JSONValue> ;
  const allKeysRaw = getJsonLeafPaths(messagesWithUsEn)
    // Remove trailing ".body.cases" (Vue I18n 9.x specific)
    .map((p) => p.replace(/\.body\.cases$/g, ''))

  const finalKeys = transformKeys(allKeysRaw)

  // Canonicalize the base-locale object to make JSON stable across runs/platforms
  const canonicalBase = canonicalize(messagesForBaseLocale as JSONValue) as JSONObject
// const messagesRawCanonical = canonicalize(messagesRaw as JSONValue) as JSONObject
  // Deterministic banner (no timestamps). Include a small content hash for traceability.
  const messagesJson = JSON.stringify(canonicalBase)
  const languagesTuple = `['${supportedLanguages.filter(l=>l!= 'js-reserved').join(`', '`)}']`
  const contentId = fnv1a32(languagesTuple + '|' + finalKeys.join('|') + '|' + messagesJson)

  const autogenerated =
    (banner ??
      `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by unplugin-vue-i18n-dts-generation (deterministic)
// Content-Hash: ${contentId}
`)
  // Normalize to LF and ensure trailing newline
  const NL = '\n'

  // We export three things:
  // - _SupportedLanguages (tuple)
  // - AllTranslationKeysGen (union of string literals)
  // - AllTranslationsGen (shape of the base-locale messages)
  // Note: we intentionally keep SupportedLanguagesGen identical to your original type (tuple type).
  // If you want a union, you can additionally use SupportedLanguageUnionGen.
  const body =
    `
import _messagesI18n from '@intlify/unplugin-vue-i18n/messages'

export const supportedLanguages = ${languagesTuple} as const
export const messages = ${messagesJson} as const
export type AllTranslationKeysGen = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}
export type SupportedLanguagesGen = typeof supportedLanguages
export type SupportedLanguageUnionGen = typeof supportedLanguages[number]
export type AllLocaleGen = typeof  messages['${baseLocale}']
export type AllTranslationsGen = typeof messages // Record<SupportedLanguageUnionGen, AllLocaleGen>
export const messagesI18n = _messagesI18n as unknown as AllTranslationsGen

`
    // export const messages = Record<SupportedLanguageUnionGen, LocaleMessages<VueMessageType>>
  // Force POSIX newlines, single trailing newline
  return (autogenerated + body).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/,'\n')
}
