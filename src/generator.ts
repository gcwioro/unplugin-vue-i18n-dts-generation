import type {DtsContentParams, JSONObject, JSONValue} from './types'
import {canonicalize, getJsonLeafPaths} from './utils/json'
import {transformKeys} from './utils/keys'
import {fnv1a32} from './utils/hash'

/**
 * Create .d.ts content for type definitions only
 */
export function toTypesContent(params: Omit<DtsContentParams, 'typeFilePath'>): string {
  const {
    baseLocale,
    messages,
    supportedLanguages,
    banner,
  } = params

  const messagesForBaseLocale = {...messages, ['en-US']: messages?.['en']??messages?.['en-US']??{}}
  // Derive leaf paths
  const messagesWithUsEn = (messages?.[baseLocale] ?? Object.values(baseLocale)[0])  as Record<string, JSONValue> ;
  const allKeysRaw = getJsonLeafPaths(messagesWithUsEn)
    // Remove trailing ".body.cases" (Vue I18n 9.x specific)
    .map((p) => p.replace(/\.body\.cases$/g, ''))

  const finalKeys = transformKeys(allKeysRaw)

  // Canonicalize the base-locale object to make JSON stable across runs/platforms
  const canonicalBase = canonicalize(messagesForBaseLocale as JSONValue) as JSONObject

  // Deterministic banner (no timestamps). Include a small content hash for traceability.
  const messagesJson = JSON.stringify(canonicalBase)
  const languagesTuple = `['${supportedLanguages.filter(l=>l!= 'js-reserved').join(`', '`)}']`
  const contentId = fnv1a32(languagesTuple + '|' + finalKeys.join('|') + '|' + messagesJson)

  const autogenerated =
    (banner ??
      `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by unplugin-vue-i18n-dts-generation (types)
// Content-Hash: ${contentId}
`)

  const NL = '\n'

  // Type definitions only
  const body = `
import type { I18nOptions } from 'vue-i18n'

export type AllTranslationKeysGen = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}
export type SupportedLanguagesGen = readonly [${supportedLanguages.filter(l=>l!= 'js-reserved').map(l => `'${l}'`).join(', ')}]
export type SupportedLanguageUnionGen = SupportedLanguagesGen[number]

// Message structure types
export type AllLocaleGen = ${JSON.stringify(canonicalBase[baseLocale], null, 2)}
export type AllTranslationsGen = Record<SupportedLanguageUnionGen, AllLocaleGen>

// Type-safe translate function parameters
export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>

// I18n config options (excludes messages as they're provided by the plugin)
export type I18nConfigOptions = Omit<I18nOptions<AllLocaleGen, {}, {}, SupportedLanguageUnionGen, false>, 'messages'>
`

  return (autogenerated + body).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/,'\n')
}

/**
 * Create .ts content for const values
 */
export function toConstsContent(params: DtsContentParams): string {
  const {
    baseLocale,
    messages,
    typeFilePath,
    supportedLanguages,
    banner,
  } = params

  const messagesForBaseLocale = {...messages, ['en-US']: messages?.['en']??messages?.['en-US']??{}}

  // Canonicalize the base-locale object to make JSON stable across runs/platforms
  const canonicalBase = canonicalize(messagesForBaseLocale as JSONValue) as JSONObject

  // Deterministic banner
  const messagesJson = JSON.stringify(canonicalBase)
  const languagesTuple = `['${supportedLanguages.filter(l=>l!= 'js-reserved').join(`', '`)}']`
  const contentId = fnv1a32(languagesTuple + '|' + messagesJson)

  const autogenerated =
    (banner ??
      `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by unplugin-vue-i18n-dts-generation (consts)
// Content-Hash: ${contentId}
`)

  const NL = '\n'

  // Runtime const values
  const body = `
import type {I18n} from 'vue-i18n'
import {
  type ComposerOptions,
  createI18n,
  type Locale,
  type NamedValue,
  type TranslateOptions,
  useI18n,
  type UseI18nOptions
} from 'vue-i18n'
import _messagesI18n from '@intlify/unplugin-vue-i18n/messages'
import type {
  AllTranslationKeysGen,
  AllTranslationsGen,
  SupportedLanguagesGen,
} from '${typeFilePath.replace(/\.d\.ts$/, '')}'

export const supportedLanguages = ${languagesTuple} as const satisfies SupportedLanguagesGen
export const messages = ${messagesJson} as const

// Type-safe i18n messages
export const messagesI18n = _messagesI18n as unknown as AllTranslationsGen

// Helper to get all translation keys
export const allTranslationKeys: AllTranslationKeysGen[] = [
${transformKeys(getJsonLeafPaths((messages?.[baseLocale] ?? {}) as Record<string, JSONValue>).map((p) => p.replace(/\.body\.cases$/g, ''))).map(k => `  '${k}'`).join(',\n')}
]

/**
 * Creates a type-safe i18n instance with pre-configured messages
 * @param options - Optional I18n configuration (messages will be automatically provided)
 * @returns Configured i18n instance
 */
export function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T): I18n<AllTranslationsGen, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : {}, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : {}, T["locale"] extends string ? T["locale"] : Locale, false> {
  const i18Options = {
    fallbackLocale: '${baseLocale}',
    missingWarn: false,
    fallbackWarn: false,
    ...options,
    // Messages are provided and cannot be overridden
    legacy: false
  } as const;
  const i18n = createI18n<false, typeof i18Options, AllTranslationsGen>(i18Options);
  return i18n;
}

export declare interface I18nCustom {
  (key: AllTranslationKeysGen, plural: number, options?: TranslateOptions): string

  (key: AllTranslationKeysGen, options?: TranslateOptions): string

  (key: AllTranslationKeysGen, defaultMsg?: string): string

  (key: AllTranslationKeysGen, defaultMsg: string, options?: TranslateOptions): string

  (key: AllTranslationKeysGen, named: NamedValue, defaultMsg?: string): string

  (key: AllTranslationKeysGen, named: NamedValue, plural?: number): string

  (key: AllTranslationKeysGen, named: NamedValue, options?: TranslateOptions): string
  (key: AllTranslationKeysGen, plural: number, named: NamedValue): string
}


export function useI18nTypeSafe(options?: Omit<UseI18nOptions, 'messages'>) {
  // const instance = i18n || createI18nInstance()
  const {t: originalT, d, n, locale, ...rest} =
    useI18n(Object.assign(options ?? {
      fallbackLocale: '${baseLocale}'
    }, {messages: messagesI18n}))

  const t = originalT as I18nCustom satisfies I18nCustom
  return {
    ...rest,
    t,
    d,
    n,
    locale,
    availableLocales: supportedLanguages as unknown as string[],
    // i18n: instance
  }
}
`

  return (autogenerated + body).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/,'\n')
}

