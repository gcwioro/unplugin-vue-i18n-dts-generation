import type {JSONObject} from './types'
import {CombinedMessages} from './core/combined-messages'


function escapeForSingleQuote(value: string): string {
  return value.replace(/\\/g, '\\\\').replace(/'/g, "\\'")
}


function createAutogeneratedBanner(banner: string | undefined, contentId: string): string {
  const bannerText = banner ?? `/* eslint-disable */
 /* prettier-ignore */
// @formatter:off
// biome-ignore lint: disable
// AUTO-GENERATED FILE. DO NOT EDIT.
// Content-Hash: ${contentId}`

  return (
    bannerText
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line.length > 0)
      .join('\n') + '\n\n'
  )
}


/**
 * Create .d.ts content for type definitions only
 */
export function toTypesContent(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  banner?: string;
  sourceId?: string;
}): string {
  const {
    combinedMessages,
    banner,
    sourceId = '@vue-i18n-types',
  } = params

  // Use CombinedMessages properties directly
  const contentId = combinedMessages.contentId


  const autogenerated = createAutogeneratedBanner(banner, contentId)

  const NL = '\n'
     const baseLocaleMessages = combinedMessages.baseLocaleMessages;
  const finalKeys = combinedMessages.keys;
  const AllSupportedLanguages = combinedMessages.languages;

  // Type definitions only - build with array for better performance
  const bodyLines = [
    `declare module '${sourceId}' {`,
    '  import {type Plugin, type WritableComputedRef} from \'vue\'',
    '  import type {  Composer,  ComposerOptions as Options,  ComposerOptions,  I18n,  I18nOptions,  Locale, NamedValue, TranslateOptions, UseI18nOptions} from "vue-i18n"',
    '  import type {MessageSchemaGen, MessagesType, AllTranslations, AllTranslationKeys, SupportedLanguage} from "virtual:vue-i18n-types/messages"',
    '  export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    `  export interface I18nCustom {  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string
      (key: AllTranslationKeys, options?: TranslateOptions): string
      (key: AllTranslationKeys, defaultMsg?: string): string
      (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string
      (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string
      (key: AllTranslationKeys, named: NamedValue, plural?: number): string
      (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string
      (key: AllTranslationKeys, plural: number, named: NamedValue): string
      (key: AllTranslationKeys, plural: number, defaultMsg: string): string
    }`,
    '  // I18n config options (excludes messages as they\'re provided by the plugin)',
    '  export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguage, false>, \'messages\'>;',
    "  export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom};",
    '  function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T): I18n<MessagesType, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"]: object, T["locale"] extends string ? T["locale"] : Locale, false>',
    '  function createI18nInstancePlugin<T extends Partial<ComposerOptions>&I18nOptions >(options?: T): Plugin<unknown[]>&( I18n<AllTranslations, T["datetimeFormats"] extends Record<string,unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : object, T["locale"] extends string ? T["locale"] : Locale, false> )',

    '  export const useI18nApp: ()=> UseI18nTypesafeReturn',
    '  function useI18nTypeSafe(options?: Omit<UseI18nOptions, \'messages\'>):UseI18nTypesafeReturn;',

    '  export {  createI18nInstance,  createI18nInstancePlugin, useI18nTypeSafe };',
    '}\n\n',
    `declare module '${sourceId}/messages' {`,

    '  export type SupportedLanguage = AllSupportedLanguages[number]',
    '  export const supportedLanguages: SupportedLanguage[] | AllSupportedLanguages' ,
    `  export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `  export type AllSupportedLanguages = readonly [${AllSupportedLanguages.map(l => `'${l}'`).join(', ')}]`,
    `  export type MessageSchemaGen = ${JSON.stringify(baseLocaleMessages)}`,
    '  export type I18nMessages = Readonly<Record<SupportedLanguage, MessageSchemaGen>>',
    '  export type AllTranslations = I18nMessages',
    `  export type MessagesType = I18nMessages`,
    '  export const messages: MessagesType;',
    '  export default messages;',

    '}',
  ];

  return (autogenerated + bodyLines.join(NL)).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/, '\n')
}



export function renderMessagesModule(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  banner?: string;
}): string {
  const {combinedMessages, banner} = params

  const autogenerated = createAutogeneratedBanner(banner, combinedMessages.contentId)

  const messagesLiteral = JSON.stringify(combinedMessages.messages, null, 2)
  const supportedLanguages = combinedMessages.languages
  const languagesLiteral = `[${supportedLanguages.map((locale) => `'${escapeForSingleQuote(locale)}'`).join(', ')}]`
  const baseLocale = escapeForSingleQuote(String(combinedMessages.baseLocale))
  const allTranslationKeys = combinedMessages.keys.length
    ? combinedMessages.keys.map((key) => `'${escapeForSingleQuote(key)}'`).join(' | ')
    : 'never'

  const body = [
    `export const messages = ${messagesLiteral} as const;`,
    '',
    `export const supportedLanguages = ${languagesLiteral} as const;`,
    `export const baseLocale = '${baseLocale}' as const;`,
    '',
    'export type SupportedLanguage = typeof supportedLanguages[number];',
    'export type MessageSchema = (typeof messages)[typeof baseLocale];',
    `export type AllTranslationKeys = ${allTranslationKeys};`,
    '',
    'export default messages;',
  ].join('\n')

  return (autogenerated + body).replace(/\r\n?/g, '\n').replace(/\n*$/, '\n')
}



/**
 * Generate virtual module file content for physical file generation
 */
export function toVirtualModuleContent(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  banner?: string;
}): string {
  const {combinedMessages} = params;

  const messagesJson = combinedMessages.messagesJsonString;
  const finalKeys = combinedMessages.keys
  const supportedLanguages = combinedMessages.languages;
  const languagesTuple = combinedMessages.languagesTuple()

  const bodyLines = [
    '',
    '// Virtual locale messages module',
    '// This file is auto-generated from your locale JSON files',
    '',
    `export const supportedLanguages = ${languagesTuple} as const`,
    '',

    'export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    `  export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `  export type AllSupportedLanguages = readonly [${supportedLanguages.filter(l => l != 'js-reserved').map(l => `'${l}'`).join(', ')}]`,
    'export type SupportedLanguage = AllSupportedLanguages[number] | string',
    'export interface I18nCustom {',
    '  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, defaultMsg?: string): string',
    '  (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string',
    '  (key: AllTranslationKeys, named: NamedValue, plural?: number): string',
    '  (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, plural: number, named: NamedValue): string',
    '  (key: AllTranslationKeys, plural: number, defaultMsg: string): string',
    '}',
    '// I18n config options (excludes messages as they\'re provided by the plugin)',
    'export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguage, false>, \'messages\'>',
    "export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom}",

    '',
    'export default messages;',

    ''
  ];
  bodyLines.push(...helperMethodsDefinition(combinedMessages.baseLocale));

  return createVirtualModuleCode({
    jsonText: messagesJson,
    baseLocale: combinedMessages.baseLocale,
    devUrlPath: '/_virtual_locales.json'
  });
}


/**
 * Emit **pure JS** (no TS annotations, no `as const`).
 * Rollup will replace `import.meta.ROLLUP_FILE_URL_<ref>` in build.
 */
export function createVirtualModuleCode(opts: {
  jsonText: string;
  buildAssetRefId?: string;
  devUrlPath?: string;
  baseLocale: string;
  virtualJsonId?: string;
}) {
  const {jsonText, baseLocale, buildAssetRefId, devUrlPath, virtualJsonId} = opts;

  const messages = JSON.parse(jsonText);
  const supportedLanguages = Object.keys(messages);
  const languagesTuple = `['${supportedLanguages.filter(l => l != 'js-reserved').join(`', '`)}']`;

  // If virtualJsonId is provided, import from the virtual JSON module
  if (virtualJsonId) {
    return `
import messagesJson from '${virtualJsonId}';

export const messages = messagesJson;
export const supportedLanguages = ${languagesTuple};

export async function load() {
  return messagesJson;
}

export default messages;

// HMR handling for live updates
if (import.meta.hot) {
  import.meta.hot.on('i18n-update', (data) => {
    console.log('[i18n] Received hot update with new messages');

    // Update the exported messages
    Object.assign(messages, data.messages);

    // Update the global i18n instance if it exists
    if (globalThis.i18nApp) {
      const i18n = useI18nApp()

      // Update messages for all locales
      Object.keys(data.messages).forEach(locale => {
        if (locale !== 'js-reserved') {
          i18n.setLocaleMessage(locale, data.messages[locale]);
        }
      });

      // Force re-render by updating a reactive property
      const currentLocale = i18n.locale.value;
      i18n.locale.value = 'de-AT';
      i18n.locale.value = currentLocale;

      console.log('[i18n] Messages updated successfully');
    }
  });
}

${helperMethodsDefinition(baseLocale).join('\n')}
`;
  }

  // Fallback to the old behavior for backward compatibility
  const urlExpr = buildAssetRefId
    ? `import.meta.ROLLUP_FILE_URL_${buildAssetRefId}`
    : JSON.stringify(devUrlPath || "/_virtual_locales.json");

  return `
const url = ${urlExpr};
export const messages = ${jsonText};
export async function load() {
  const res = await fetch(url, { credentials: 'same-origin' });
  if (!res.ok) throw new Error('Failed to load locales: ' + res.status);
  return await res.json();
}

export const supportedLanguages = ${languagesTuple};

export default messages;

// HMR handling for live updates
if (import.meta.hot) {
  import.meta.hot.on('i18n-update', (data) => {
    console.log('[i18n] Received hot update with new messages');

    // Update the exported messages
    Object.assign(messages, data.messages);

    // Update the global i18n instance if it exists
    if (globalThis.i18nApp) {
      const i18n = globalThis.i18nApp;

      // Update messages for all locales
      Object.keys(data.messages).forEach(locale => {
        if (locale !== 'js-reserved') {
          i18n.global.setLocaleMessage(locale, data.messages[locale]);
        }
      });

      // Force re-render by updating a reactive property
      const currentLocale = i18n.global.locale.value;
      i18n.global.locale.value = currentLocale;

      console.log('[i18n] Messages updated successfully');
    }
  });
}

${helperMethodsDefinition(baseLocale).join('\n')}
`;
}

const translationWrapper = `
/**
 * A higher-order function that wraps another function to conditionally process its arguments.
 *
 * If the wrapper is called with two or more arguments, and the second argument
 * is a string that can be parsed into a finite number, it will:
 * 1. Convert the second argument to a Number.
 * 2. Ensure the third argument is an object and add 'count' and 'n' properties
 *    to it, with the value of the parsed number. If the third argument is not
 *    an object, a new object will be created.
 *
 * @param {Function} fn The function to wrap.
 * @returns {Function} A new function that wraps the original.
 */
function withNumericSecondArg(fn) {
  // Return a new function that will be used in place of the original.
  // We use rest parameters (...args) to capture all arguments into an array.
  return function(...args) {

    // Condition 1: Check if there are at least two arguments.
    if (args.length >= 2) {
      const secondArg = args[1];
      console.log(args,typeof secondArg)

      // Condition 2: Check if the second argument is a string that can be parsed into a number.
      // We use parseFloat and isFinite for a robust check.
      if ( typeof secondArg === 'number' || (typeof secondArg === 'string'  && !isNaN(parseFloat(secondArg)) && isFinite(secondArg))) {
        const numericValue = parseFloat(secondArg);
        const originalThirdArg = args[2];

        // Prepare the new third argument.
        // If the original third arg is a non-array object, merge with it.
        // Otherwise, create a new object.
        const newThirdArg = (typeof originalThirdArg === 'object' && originalThirdArg !== null && !Array.isArray(originalThirdArg))
          ?  { ...originalThirdArg, count: numericValue, n: numericValue }
          : { count: numericValue, n: numericValue };

        // Create a new arguments array with the modified values.
        const newArgs = [
          args[0],          // First argument
        //  numericValue,     // Converted second argument
          newThirdArg      // Modified or created third argument

        ];
console.log(newThirdArg);
        // Call the original function with the modified arguments.
        return fn.apply(this, newArgs);
      }
    }

    // If conditions are not met, call the original function with the original arguments.
    return fn.apply(this, args);
  }
}`
function helperMethodsDefinition(baseLocale: string) {
  return [
    "import { createI18n, useI18n } from 'vue-i18n'",
    'export const useI18nApp = ()=> window.i18nApp.global',
    'var i18nApp =null',
    '/**',
    ' * Creates a type-safe i18n instance with pre-configured messages',
    ' * @param options - Optional I18n configuration (messages will be automatically provided)',
    ' * @returns Configured i18n instance',
    ' */',
    `export const fallBackLocales =supportedLanguages.reduce(
  (acc, locale) => {
    acc[locale] = [locale, locale === 'en' ? undefined : 'en', locale === 'de' ? undefined : 'de'].filter(a => a !== undefined)
    if(locale === 'en')
 acc[locale] =[...acc[locale], 'en-US' ]
    return acc
  },{}
)`,
    ...translationWrapper.split("\n"),
    'export function createI18nInstance(options) {',
    '  const i18Options = {',
    `    fallbackLocale: fallBackLocales,`,
    // '    missingWarn: false,',
    // '    fallbackWarn: false,',

    `    locale: navigator?.language ?? '${baseLocale}',`,
    `    legacy: false,`,
    '    ...options,',
    '    messages: messages,',
    '  }',
    '  i18nApp = createI18n(i18Options);',
    '  globalThis.i18nApp = i18nApp;',

    // '  i18nApp.global.locale = navigator?.language?.split("-")?.[0] ?? ' + baseLocale,
    '  return i18nApp;',
    '}',
    '',
    'export function createI18nInstancePlugin(options) {',
    '  const i18n = createI18nInstance(options);',
    '  return i18n;',
    '}',
    '',
    'export function useI18nTypeSafe(options) {',
    '  const {t: originalT, d, n, ...rest} = useI18n({',
    // `    fallbackLocale: '${baseLocale}',`,
    '    ...(options??{}),',
    '  })',
    '',

    '  return {',
    '    ...rest,',
    '    t:withNumericSecondArg(originalT),',
    '    d,',
    '    n,',
    '  }',
    '}',
    ''];
}
