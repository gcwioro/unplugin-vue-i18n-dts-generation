import type {JSONObject} from './types'
import {CombinedMessages} from './core/combined-messages'


/**
 * Create .d.ts content for type definitions only
 */
export function toTypesContent(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  banner?: string;
  sourceId?: string;
}): string {
  const {
    combinedMessages,
    banner,
    sourceId = '@unplug-i18n-types-locales',
  } = params

  // Use CombinedMessages properties directly
  const contentId = combinedMessages.contentId


  const autogenerated =
    (banner ?? //// @ts-nocheck
      `/* eslint-disable */
       /* prettier-ignore */
      // biome-ignore lint: disable
      // AUTO-GENERATED FILE. DO NOT EDIT.
      // Content-Hash: ${contentId}
`.split('\n').map(l => l.trim()).filter(l => l).join('\n') + '\n\n')

  const NL = '\n'

  // Type definitions only - build with array for better performance
  const bodyLines = [
    `declare module '${sourceId}' {`,
    getModuleFunction().split(NL).map(l => '  ' + l).join(NL),
    getMessageTypeDefinitions(combinedMessages).split(NL).map(l => '  ' + l).join(NL),

    '}',
  ];

  return (autogenerated + bodyLines.join(NL)).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/, '\n')
}

export function getModuleFunction(): string {
  return [
    'import {type Plugin, type WritableComputedRef} from \'vue\'',
    'import type {  Composer,  ComposerOptions as Options,  ComposerOptions,  I18n,  I18nOptions,  Locale, NamedValue, TranslateOptions, UseI18nOptions} from "vue-i18n"',

    'export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    'export interface I18nCustom {',
    '  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, plural?: number): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, plural: number, named: NamedValue): string',
    '  (key: AllTranslationKeys, plural: number, defaultMsg: string): string',
    '}',
    '// I18n config options (excludes messages as they\'re provided by the plugin)',
    'export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguage, false>, \'messages\'>;',
    "export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom};",
    '  function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T): I18n<MessagesType, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"]: object, T["locale"] extends string ? T["locale"] : Locale, false>',
    '  function createI18nInstancePlugin<T extends Partial<ComposerOptions>&I18nOptions >(options?: T): Plugin<unknown[]>&( I18n<AllTranslations, T["datetimeFormats"] extends Record<string,unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : object, T["locale"] extends string ? T["locale"] : Locale, false> )',

    '',
    'function useI18nTypeSafe(options?: Omit<UseI18nOptions, \'messages\'>):UseI18nTypesafeReturn;',

    '  export {  createI18nInstance,  createI18nInstancePlugin, useI18nTypeSafe };'].join("\n")

}

export function getMessageTypeDefinitions(combinedMessages: CombinedMessages<string, JSONObject>): string {
  const baseLocaleMessages = combinedMessages.baseLocaleMessages;
  const finalKeys = combinedMessages.keys;
  const AllSupportedLanguages = combinedMessages.languages;

  return [
    '',
    'export type SupportedLanguage = AllSupportedLanguages[number] | string',
    'export const supportedLanguages: SupportedLanguage[] | AllSupportedLanguages = ' + combinedMessages.languagesTuple() + ' as const',
    `export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `export type AllSupportedLanguages = readonly [${AllSupportedLanguages.map(l => `'${l}'`).join(', ')}]`,
    '',
    '// Message structure types',
    `export type MessageSchemaGen = ${JSON.stringify(baseLocaleMessages, null, 1)}`,
    'export type I18nMessages = Readonly<Record<SupportedLanguage, MessageSchemaGen>>',
    'export type AllTranslations = I18nMessages',
    `export type MessagesType = I18nMessages`,
    'export const messages: MessagesType;',
    'export default messages;',
  ].join("\n")
}

/**
 * Generate virtual module file content for physical file generation
 */
export function toVirtualModuleContent(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  banner?: string;
}): string {
  const {combinedMessages} = params;

  const messagesJson = combinedMessages.messagesJsonString;
  const finalKeys = combinedMessages.keys
  const supportedLanguages = combinedMessages.languages;
  const languagesTuple = combinedMessages.languagesTuple()

  const bodyLines = [
    '',
    '// Virtual locale messages module',
    '// This file is auto-generated from your locale JSON files',
    '',
    `const messages = ${messagesJson} as const;`,
    `export const supportedLanguages = ${languagesTuple} as const`,
    '',
    'export async function load() {',
    '  return messages;',
    '}',
    'export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    `  export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `  export type AllSupportedLanguages = readonly [${supportedLanguages.filter(l => l != 'js-reserved').map(l => `'${l}'`).join(', ')}]`,
    'export type SupportedLanguage = AllSupportedLanguages[number] | string',
    'export interface I18nCustom {',
    '  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, plural?: number): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, plural: number, named: NamedValue): string',
    '  (key: AllTranslationKeys, plural: number, defaultMsg: string): string',
    '}',
    '// I18n config options (excludes messages as they\'re provided by the plugin)',
    'export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguage, false>, \'messages\'>',
    "export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom}",

    '',
    'export default messages;',

    ''
  ];
  bodyLines.push(...helperMethodsDefinition(combinedMessages.baseLocale));

  return createVirtualModuleCode({
    jsonText: messagesJson,
    baseLocale: combinedMessages.baseLocale,
    devUrlPath: '/_virtual_locales.json'
  });
}



/**
 * Emit **pure JS** (no TS annotations, no `as const`).
 * Rollup will replace `import.meta.ROLLUP_FILE_URL_<ref>` in build.
 */
export function createVirtualModuleCode(opts: {
  jsonText: string;
  buildAssetRefId?: string;
  devUrlPath?: string;
  baseLocale: string
}) {
  const {jsonText, baseLocale, buildAssetRefId, devUrlPath} = opts;

  const urlExpr = buildAssetRefId
    ? `import.meta.ROLLUP_FILE_URL_${buildAssetRefId}`
    : JSON.stringify(devUrlPath || "/_virtual_locales.json");
  const messages = JSON.parse(jsonText);
  const supportedLanguages = Object.keys(messages);

  const languagesTuple = `['${supportedLanguages.filter(l => l != 'js-reserved').join(`', '`)}']`

  return `
const url = ${urlExpr};
export const messages = ${jsonText};
export async function load() {
  const res = await fetch(url, { credentials: 'same-origin' });
  if (!res.ok) throw new Error('Failed to load locales: ' + res.status);
  return await res.json();
}

 export const supportedLanguages = ${languagesTuple}

export default messages;

${helperMethodsDefinition(baseLocale).join('\n')}
`;
}


function helperMethodsDefinition(baseLocale: string) {
  return [
    "import { createI18n, useI18n } from 'vue-i18n'",
    '',
    '/**',
    ' * Creates a type-safe i18n instance with pre-configured messages',
    ' * @param options - Optional I18n configuration (messages will be automatically provided)',
    ' * @returns Configured i18n instance',
    ' */',
    'export function createI18nInstance(options) {',
    '  const i18Options = {',
    `    fallbackLocale: '${baseLocale}',`,
    '    missingWarn: false,',
    '    fallbackWarn: false,',
    '    ...options,',
    '    messages: messages,',
    '    legacy: false',
    '  }',
    '  const i18n = createI18n(i18Options);',
    '  return i18n;',
    '}',
    '',
    'export function createI18nInstancePlugin(options) {',
    '  const i18n = createI18nInstance(options);',
    '  return i18n;',
    '}',
    '',
    'export function useI18nTypeSafe(options) {',
    '  const {t: originalT, d, n, locale, ...rest} = useI18n(Object.assign(options ?? {',
    `    fallbackLocale: '${baseLocale}'`,
    '  }, {messages: messages}))',
    '',
    '  const t = originalT',
    '  return {',
    '    ...rest,',
    '    t,',
    '    d,',
    '    n,',
    '    locale,',
    '    availableLocales: supportedLanguages',
    '  }',
    '}',
    ''];
}
