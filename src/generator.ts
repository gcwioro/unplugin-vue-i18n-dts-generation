import type {JSONObject} from './types';
import {CombinedMessages} from './core/combined-messages';
import {
  numericPluralWrapperSnippet,
  runtimeBootstrapSnippet,
  runtimeHmrSnippet,
} from './templates/runtime-snippets';

function normalizeNewlines(value: string): string {
  return value.replace(/\r\n?/g, '\n');
}

export function createAutogeneratedBanner(banner: string | undefined, contentId: string): string {
  const bannerText =
    banner ??
    `/* eslint-disable */\n` +
      '/* prettier-ignore */\n' +
      '// @formatter:off\n' +
      '// biome-ignore lint: disable\n' +
      '// AUTO-GENERATED FILE. DO NOT EDIT.\n' +
      `// Content-Hash: ${contentId}`;

  return (
    bannerText
      .split('\n')
      .map((line) => line.trim())
      .filter((line) => line.length > 0)
      .join('\n') + '\n\n'
  );
}

function formatKeyUnion(keys: string[]): string {
  if (keys.length === 0) {
    return 'never';
  }

  return keys.map((key) => JSON.stringify(key)).join(' | ');
}

function formatLanguages(languages: readonly string[]): string {
  return `[${languages.map((locale) => JSON.stringify(locale)).join(', ')}]`;
}

export function renderMessagesModule(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  banner?: string;
}): string {
  const {combinedMessages, banner} = params;

  const autogenerated = createAutogeneratedBanner(banner, combinedMessages.contentId);
  const messagesLiteral = JSON.stringify(combinedMessages.messages, null, 2);
  const languagesLiteral = formatLanguages(combinedMessages.languages);
  const baseLocaleLiteral = JSON.stringify(String(combinedMessages.baseLocale));
  const allTranslationKeys = formatKeyUnion(combinedMessages.keys);

  const body = `export const messages = ${messagesLiteral} as const satisfies Record<string, Record<string, unknown>>;
export const supportedLanguages = ${languagesLiteral} as const;
export const baseLocale = ${baseLocaleLiteral} as const;

export type AllSupportedLanguages = typeof supportedLanguages;
export type SupportedLanguage = AllSupportedLanguages[number];
export type MessagesType = typeof messages;
export type AllTranslations = MessagesType;
type BaseLocaleKey = Extract<typeof baseLocale, keyof MessagesType>;
type BaseMessages = BaseLocaleKey extends never ? Record<string, unknown> : MessagesType[BaseLocaleKey];
export type MessageSchemaGen = BaseMessages;
export type AllTranslationKeys = ${allTranslationKeys};

export default messages;`;

  return normalizeNewlines(autogenerated + body).replace(/\n*$/, '\n');
}

export function renderRuntimeModuleTs(params: {
  combinedMessages: CombinedMessages<string, JSONObject>;
  banner?: string;
  sourceId: string;
}): string {
  const {combinedMessages, banner} = params;
  const autogenerated = createAutogeneratedBanner(banner, combinedMessages.contentId);
  const allTranslationKeys = formatKeyUnion(combinedMessages.keys);

  const header = `import {createI18n, useI18n} from 'vue-i18n';
import type {NamedValue, TranslateOptions} from 'vue-i18n';
import messages, {supportedLanguages, baseLocale} from './messages';`;

  const declarations = `type BaseI18nOptions = Parameters<typeof createI18n>[0];
export type AllSupportedLanguages = typeof supportedLanguages;
export type SupportedLanguage = AllSupportedLanguages[number];
export type MessagesType = typeof messages;
export type AllTranslations = MessagesType;
type BaseLocaleKey = Extract<typeof baseLocale, keyof MessagesType>;
type BaseMessages = BaseLocaleKey extends never ? Record<string, unknown> : MessagesType[BaseLocaleKey];
export type MessageSchemaGen = BaseMessages;
export type AllTranslationKeys = ${allTranslationKeys};
type UseI18nParameters = Parameters<typeof useI18n<MessageSchemaGen, SupportedLanguage>>[0];
type SanitizedUseI18nOptions = UseI18nParameters extends undefined
  ? undefined
  : Omit<NonNullable<UseI18nParameters>, 'messages'>;
type BaseComposer = ReturnType<typeof useI18n<MessageSchemaGen, SupportedLanguage>>;
type I18nInstance = ReturnType<typeof createI18n>;
type BaseFallbackLocale = BaseI18nOptions extends { fallbackLocale?: infer T }
  ? T
  : Record<string, readonly string[]>;

export {messages, supportedLanguages, baseLocale};

export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>;
export interface I18nCustom {
  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string;
  (key: AllTranslationKeys, options?: TranslateOptions): string;
  (key: AllTranslationKeys, defaultMsg?: string): string;
  (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string;
  (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string;
  (key: AllTranslationKeys, named: NamedValue, plural?: number): string;
  (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string;
  (key: AllTranslationKeys, plural: number, named: NamedValue): string;
  (key: AllTranslationKeys, plural: number, defaultMsg: string): string;
}
export type I18nConfigOptions = Omit<BaseI18nOptions, 'messages'>;
export type UseI18nTypesafeReturn = Omit<BaseComposer, 't'> & { t: I18nCustom };`;

  const snippets = [
    numericPluralWrapperSnippet.trim(),
    runtimeBootstrapSnippet.trim(),
    runtimeHmrSnippet.trim(),
  ].join('\n\n');

  const body = [header.trim(), '', declarations.trim(), '', snippets].join('\n');

  return normalizeNewlines(autogenerated + body).replace(/\n*$/, '\n');
}

export function createVirtualModuleCode(opts: {
  jsonText: string;
  buildAssetRefId?: string;
  devUrlPath?: string;
  baseLocale: string;
  virtualJsonId?: string;
}): string {
  const {jsonText, baseLocale, buildAssetRefId, devUrlPath, virtualJsonId} = opts;
  const urlExpr =
    buildAssetRefId !== undefined
      ? `import.meta.ROLLUP_FILE_URL_${buildAssetRefId}`
      : JSON.stringify(devUrlPath ?? '/_virtual_locales.json');

  const preload = virtualJsonId
    ? `import messagesJson from ${JSON.stringify(virtualJsonId)};\nconst messages = messagesJson;`
    : `const messages = ${jsonText};`;

  const loader = virtualJsonId
    ? '  return messagesJson;'
    : `  const res = await fetch(${urlExpr}, { credentials: 'same-origin' });
  if (!res.ok) {
    throw new Error('Failed to load locales: ' + res.status);
  }
  return await res.json();`;

  const body = `${preload}

export {messages};
export const baseLocale = ${JSON.stringify(baseLocale)};
export async function load() {
${loader}
}

export default messages;`;

  return normalizeNewlines(body).replace(/\n*$/, '\n');
}
