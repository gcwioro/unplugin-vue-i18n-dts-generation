import type {DtsContentParams, JSONObject, JSONValue} from './types'
import {getJsonLeafPaths} from './utils/json'
import {transformKeys} from './utils/keys'
import {fnv1a32} from './utils/hash'


/**
 * Create .d.ts content for type definitions only
 */
export function toTypesContent(params: Omit<DtsContentParams<JSONObject>, 'typeFilePath'>): string {
  const {
    baseLocale,
    messages,
    supportedLanguages,
    banner,
    sourceId = '@unplug-i18n-types-locales',
  } = params

  // Derive leaf paths


  // Messages are already canonicalized from plugin.ts
  const canonicalBase = messages as JSONObject
  // const baseLocaleMessages = canonicalBase[baseLocale] ?? Object.values(canonicalBase)[0];

  // Deterministic banner (no timestamps). Include a small content hash for traceability.
  const messagesJson = JSON.stringify(canonicalBase)
  const languagesTuple = `['${supportedLanguages.filter(l => l != 'js-reserved').join(`', '`)}']`
  const contentId = fnv1a32(languagesTuple + '|' + '|' + messagesJson)

  const autogenerated =
    (banner ?? //// @ts-nocheck
      `/* eslint-disable */
       /* prettier-ignore */
      // biome-ignore lint: disable
      // AUTO-GENERATED FILE. DO NOT EDIT.
      // Content-Hash: ${contentId}
`.split('\n').map(l => l.trim()).filter(l => l).join('\n') + '\n\n')

  const NL = '\n'

  // Type definitions only - build with array for better performance
  const bodyLines = [
    `declare module '${sourceId}' {`,
    getModuleFunction().split(NL).map(l => '  ' + l).join(NL),
    getMessageTypeDefinitions(baseLocale, messages, supportedLanguages).split(NL).map(l => '  ' + l).join(NL),

    '}',
  ];

  return (autogenerated + bodyLines.join(NL)).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/, '\n')
}

export function getModuleFunction(): string {
  return [
    'import {type Plugin, type WritableComputedRef} from \'vue\'',
    'import type {  Composer,  ComposerOptions as Options,  ComposerOptions,  I18n,  I18nOptions,  Locale, NamedValue, TranslateOptions, UseI18nOptions} from "vue-i18n"',

    'export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    'export interface I18nCustom {',
    '  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, plural?: number): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, plural: number, named: NamedValue): string',
    '  (key: AllTranslationKeys, plural: number, defaultMsg: string): string',
    '}',
    '// I18n config options (excludes messages as they\'re provided by the plugin)',
    'export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguageUnion, false>, \'messages\'>;',
    "export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom};",
    '  function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T): I18n<MessagesType, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"]: object, T["locale"] extends string ? T["locale"] : Locale, false>',
    '  function createI18nInstancePlugin<T extends Partial<ComposerOptions>&I18nOptions >(options?: T): Plugin<unknown[]>&( I18n<AllTranslations, T["datetimeFormats"] extends Record<string,unknown> ? T["datetimeFormats"] : object, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : object, T["locale"] extends string ? T["locale"] : Locale, false> )',

    '',
    'function useI18nTypeSafe(options?: Omit<UseI18nOptions, \'messages\'>):UseI18nTypesafeReturn;',

    '  export {  createI18nInstance,  createI18nInstancePlugin, useI18nTypeSafe };'].join("\n")

}

export function getMessageTypeDefinitions(baseLocale: string, messages: Record<string, JSONObject>, supportedLanguages: string[]): string {
  const canonicalBase = messages
  const baseLocaleMessages = canonicalBase[baseLocale] ?? Object.values(canonicalBase)[0]
  const finalKeys = getFinalKeys(messages, baseLocale);

  return [
    '',
    'const supportedLanguages: readonly[string] = ' + `['${supportedLanguages.filter(l => l != 'js-reserved').join(`', '`)}'] as const`,
    `export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `export type SupportedLanguages = readonly [${supportedLanguages.filter(l => l != 'js-reserved').map(l => `'${l}'`).join(', ')}]`,
    'export type SupportedLanguageUnion = SupportedLanguages[number]',

    '',
    '// Message structure types',
    `export type MessageSchemaGen = ${JSON.stringify(baseLocaleMessages, null, 1)}`,
    'export type I18nMessages = Readonly<Record<SupportedLanguageUnion, MessageSchemaGen>>',
    'export type AllTranslations = I18nMessages',

    `export type MessagesType = I18nMessages`,
    'const messages: MessagesType;',
    'export default messages;',
    '',
    '// Type-safe translate function parameters',
    '',
    'export { supportedLanguages, messages }'
  ].join("\n")
}

/**
 * Generate virtual module file content for physical file generation
 */
export function toVirtualModuleContent(params: {
  messages: Record<string, JSONObject>
  banner?: string,
  sourceId: string,
  baseLocale: string
}): string {
  const {sourceId, messages, baseLocale} = params;

  const messagesJson = JSON.stringify(messages, null, 1);
  const messagesForBaseLocale = (messages?.[baseLocale] ?? Object.values(messages)[0]) as Record<string, JSONValue>;
  const allKeysRaw = getJsonLeafPaths(messagesForBaseLocale)
    .map((p) => p.replace(/\.body\.cases$/g, ''))

  const finalKeys = transformKeys(allKeysRaw)
  const supportedLanguages = Object.keys(messages);
  const languagesTuple = `['${supportedLanguages.filter(l => l != 'js-reserved').join(`', '`)}']`

  const bodyLines = [
    '',
    '// Virtual locale messages module',
    '// This file is auto-generated from your locale JSON files',
    '',
    `const messages = ${messagesJson} as const;`,
    `export const supportedLanguages = ${languagesTuple} as const`,
    '',
    'export async function load() {',
    '  return messages;',
    '}',
    'export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    `  export type AllTranslationKeys = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `  export type SupportedLanguages = readonly [${supportedLanguages.filter(l => l != 'js-reserved').map(l => `'${l}'`).join(', ')}]`,
    'export type SupportedLanguageUnion = SupportedLanguages[number]',
    'export interface I18nCustom {',
    '  (key: AllTranslationKeys, plural: number, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, defaultMsg: string, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, plural?: number): string',
    '',
    '  (key: AllTranslationKeys, named: NamedValue, options?: TranslateOptions): string',
    '  (key: AllTranslationKeys, plural: number, named: NamedValue): string',
    '  (key: AllTranslationKeys, plural: number, defaultMsg: string): string',
    '}',
    '// I18n config options (excludes messages as they\'re provided by the plugin)',
    'export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguageUnion, false>, \'messages\'>',
    "export type UseI18nTypesafeReturn = Omit<Composer<NonNullable<Options['messages']>, NonNullable<Options['datetimeFormats']>, NonNullable<Options['numberFormats']>, Options['locale'] extends unknown ? string : Options['locale']>,'t'> & { t: I18nCustom}",

    '',
    'export default messages;',

    ''
  ];
  bodyLines.push(...helperMethodsDefinition(baseLocale));

  return createVirtualModuleCode({
    jsonText: messagesJson,
    exportData: false,
    sourceId,
    baseLocale,
    devUrlPath: '/_virtual_locales.json'
  });
}

function getFinalKeys(messages: JSONObject, baseLocale: string) {
  const messagesForBaseLocale = (messages?.[baseLocale] ?? Object.values(messages)[0]) as Record<string, JSONValue>;
  const allKeysRaw = getJsonLeafPaths(messagesForBaseLocale)
    .map((p) => p.replace(/\.body\.cases$/g, ''))

  return transformKeys(allKeysRaw);
}

/**
 * Emit **pure JS** (no TS annotations, no `as const`).
 * Rollup will replace `import.meta.ROLLUP_FILE_URL_<ref>` in build.
 */
export function createVirtualModuleCode(opts: {
  jsonText: string;
  exportData: boolean;
  sourceId: string;
  buildAssetRefId?: string;
  devUrlPath?: string;
  baseLocale: string;
}) {
  const {jsonText, baseLocale, buildAssetRefId, devUrlPath} = opts;

  const urlExpr = buildAssetRefId
    ? `import.meta.ROLLUP_FILE_URL_${buildAssetRefId}`
    : JSON.stringify(devUrlPath || "/_virtual_locales.json");
  const messages = JSON.parse(jsonText);
  const supportedLanguages = Object.keys(messages);

  const languagesTuple = `['${supportedLanguages.filter(l => l != 'js-reserved').join(`', '`)}']`

  return `
const url = ${urlExpr};
export const messages = ${jsonText};
export async function load() {
  const res = await fetch(url, { credentials: 'same-origin' });
  if (!res.ok) throw new Error('Failed to load locales: ' + res.status);
  return await res.json();
}

 export const supportedLanguages = ${languagesTuple}

export default messages;

${helperMethodsDefinition(baseLocale).join('\n')}
`;
}


function helperMethodsDefinition(baseLocale: string) {
  return [
    "import { createI18n, useI18n } from 'vue-i18n'",
    '',
    '/**',
    ' * Creates a type-safe i18n instance with pre-configured messages',
    ' * @param options - Optional I18n configuration (messages will be automatically provided)',
    ' * @returns Configured i18n instance',
    ' */',
    'export function createI18nInstance(options) {',
    '  const i18Options = {',
    `    fallbackLocale: '${baseLocale}',`,
    '    missingWarn: false,',
    '    fallbackWarn: false,',
    '    ...options,',
    '    messages: messages,',
    '    legacy: false',
    '  }',
    '  const i18n = createI18n(i18Options);',
    '  return i18n;',
    '}',
    '',
    'export function createI18nInstancePlugin(options) {',
    '  const i18n = createI18nInstance(options);',
    '  return i18n;',
    '}',
    '',
    'export function useI18nTypeSafe(options) {',
    '  const {t: originalT, d, n, locale, ...rest} = useI18n(Object.assign(options ?? {',
    `    fallbackLocale: '${baseLocale}'`,
    '  }, {messages: messages}))',
    '',
    '  const t = originalT',
    '  return {',
    '    ...rest,',
    '    t,',
    '    d,',
    '    n,',
    '    locale,',
    '    availableLocales: supportedLanguages',
    '  }',
    '}',
    ''];
}
