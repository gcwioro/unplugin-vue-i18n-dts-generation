import type {DtsContentParams, JSONObject, JSONValue} from './types'
import {getJsonLeafPaths} from './utils/json'
import {transformKeys} from './utils/keys'
import {fnv1a32} from './utils/hash'

/**
 * Create .d.ts content for type definitions only
 */
export function toTypesContent(params: Omit<DtsContentParams, 'typeFilePath'>): string {
  const {
    baseLocale,
    messages,
    supportedLanguages,
    banner,
    sourceId = '@unplug-i18n-types-locales',
  } = params

  // Derive leaf paths
  const messagesForBaseLocale = (messages?.[baseLocale] ?? Object.values(messages)[0]) as Record<string, JSONValue>;
  const allKeysRaw = getJsonLeafPaths(messagesForBaseLocale)
    // Remove trailing ".body.cases" (Vue I18n 9.x specific)
    .map((p) => p.replace(/\.body\.cases$/g, ''))

  const finalKeys = transformKeys(allKeysRaw)

  // Messages are already canonicalized from plugin.ts
  const canonicalBase = messages as JSONObject
  const baseLocaleMessages = canonicalBase[baseLocale] ?? Object.values(canonicalBase)[0]

  // Deterministic banner (no timestamps). Include a small content hash for traceability.
  const messagesJson = JSON.stringify(canonicalBase)
  const languagesTuple = `['${supportedLanguages.filter(l=>l!= 'js-reserved').join(`', '`)}']`
  const contentId = fnv1a32(languagesTuple + '|' + finalKeys.join('|') + '|' + messagesJson)

  const autogenerated =
    (banner ?? //// @ts-nocheck
      `/* eslint-disable */
       /* prettier-ignore */
      // biome-ignore lint: disable
      // noinspection JSUnusedGlobalSymbols'
      // AUTO-GENERATED FILE. DO NOT EDIT.
      // Content-Hash: ${contentId}
`.split('\n').map(l => l.trim()).filter(l => l).join('\n') + '\n\n')

  const NL = '\n'

  // Type definitions only - build with array for better performance
  const bodyLines = [
    '',
    `declare module '${sourceId}' {`,
    '',
    '',
    '  const messages: Record<string, any>',
    '  export default messages',
    '}',
    '',
    "import type { I18nOptions } from 'vue-i18n'",
    '',
    `export type AllTranslationKeysGen = ${finalKeys.length ? `'${finalKeys.join(`' | '`)}'` : 'never'}`,
    `export type SupportedLanguagesGen = readonly [${supportedLanguages.filter(l => l != 'js-reserved').map(l => `'${l}'`).join(', ')}]`,
    'export type SupportedLanguageUnionGen = SupportedLanguagesGen[number]',
    '',
    '// Message structure types',
    `export type MessageSchemaGen = ${JSON.stringify(baseLocaleMessages, null, 2)}`,
    'export type AllLocaleGen = Readonly<Record<SupportedLanguageUnionGen, MessageSchemaGen>>',
    'export type AllTranslationsGen = AllLocaleGen',
    '',
    '// Type-safe translate function parameters',
    'export type TranslateParams = (string | number | undefined | null) | Record<string, unknown>',
    '',
    '// I18n config options (excludes messages as they\'re provided by the plugin)',
    'export type I18nConfigOptions = Omit<I18nOptions<MessageSchemaGen, {}, {}, SupportedLanguageUnionGen, false>, \'messages\'>',
    ''
  ];

  return (autogenerated + bodyLines.join(NL)).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/, '\n')
}

/**
 * Create .ts content for const values
 */
export function toConstsContent(params: DtsContentParams): string {
  const {
    baseLocale,
    messages,
    typeFilePath,
    supportedLanguages,
    banner,
    exportMessages = true,
    sourceId = '@unplug-i18n-types-locales'
  } = params

  // Messages are already canonicalized from plugin.ts
  const canonicalBase = messages as JSONObject

  // Deterministic banner
  const messagesJson = JSON.stringify(canonicalBase)
  const languagesTuple = `['${supportedLanguages.filter(l=>l!= 'js-reserved').join(`', '`)}']`
  const contentId = fnv1a32(languagesTuple + '|' + messagesJson)

  const autogenerated =
    (banner ??
      `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by unplugin-vue-i18n-dts-generation (consts)
// Content-Hash: ${contentId}
`)

  const NL = '\n'

  // Runtime const values - build with array for better performance
  const allKeys = exportMessages ? transformKeys(getJsonLeafPaths((messages?.[baseLocale] ?? Object.values(messages)[0]) as Record<string, JSONValue>).map((p) => p.replace(/\.body\.cases$/g, ''))) : [];

  const bodyLines = [
    '',
    "import type {I18n, I18nOptions} from 'vue-i18n'",
    "import { type Plugin} from 'vue'",
    'import {',
    '  type ComposerOptions,',
    '  createI18n,',
    '  type Locale,',
    '  type NamedValue,',
    '  type TranslateOptions,',
    '  useI18n,',
    '  type UseI18nOptions',
    "} from 'vue-i18n'",
    '// @ts-expect-error - Virtual module provided by vite-plugin-locale-json',
    `import _messagesI18n from '${sourceId}'`,
    'import type {',
    '  AllTranslationKeysGen,',
    '  AllTranslationsGen,',
    '  SupportedLanguagesGen,',
    `} from '${typeFilePath.replace(/\.d\.ts$/, '')}'`,
    '',
    `export const supportedLanguages = ${languagesTuple} as const satisfies SupportedLanguagesGen`,
    exportMessages ? `export const messages = ${messagesJson} as const` : '',
    '',
    '// Type-safe i18n messages',
    'export const messagesI18n = _messagesI18n as unknown as AllTranslationsGen',
    '',
    '',
  ];

  if (exportMessages) {
    bodyLines.push('// Helper to get all translation keys');
    bodyLines.push('export const allTranslationKeys: AllTranslationKeysGen[] = [');
    bodyLines.push(...allKeys.map(k => `  '${k}',`));
    bodyLines.push(']');
    bodyLines.push('');
  }

  bodyLines.push(
    '',
    '',
    '/**',
    ' * Creates a type-safe i18n instance with pre-configured messages',
    ' * @param options - Optional I18n configuration (messages will be automatically provided)',
    ' * @returns Configured i18n instance',
    ' */',
    'export function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T): I18n<AllTranslationsGen, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : {}, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : {}, T["locale"] extends string ? T["locale"] : Locale, false> {',
    '  const i18Options = {',
    `    fallbackLocale: '${baseLocale}',`,
    '    missingWarn: false,',
    '    fallbackWarn: false,',
    '    ...options,',
    '    // Messages are provided and cannot be overridden',
    '    messages: messagesI18n,',
    '    legacy: false',
    '  } as const;',
    '  const i18n = createI18n<false, typeof i18Options, AllTranslationsGen>(i18Options);',
    '  return i18n;',
    '}',
    'export function createI18nInstancePlugin<T extends Partial<ComposerOptions>&I18nOptions >(options?: T): Plugin<unknown[]>&( I18n<AllTranslationsGen, T["datetimeFormats"] extends Record<string,unknown> ? T["datetimeFormats"] : {}, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : {}, T["locale"] extends string ? T["locale"] : Locale, false> ){',
    '  const i18n = createI18nInstance(options);',
    '  return i18n as any;',
    '}',
    'export declare interface I18nCustom {',
    '  (key: AllTranslationKeysGen, plural: number, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeysGen, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeysGen, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeysGen, defaultMsg: string, options?: TranslateOptions): string',
    '',
    '  (key: AllTranslationKeysGen, named: NamedValue, defaultMsg?: string): string',
    '',
    '  (key: AllTranslationKeysGen, named: NamedValue, plural?: number): string',
    '',
    '  (key: AllTranslationKeysGen, named: NamedValue, options?: TranslateOptions): string',
    '  (key: AllTranslationKeysGen, plural: number, named: NamedValue): string',
    '  (key: AllTranslationKeysGen, plural: number, defaultMsg: string): string',
    '}',
    '',
    '',
    "export function useI18nTypeSafe(options?: Omit<UseI18nOptions, 'messages'>) {",
    '  // const instance = i18n || createI18nInstance()',
    '  const {t: originalT, d, n, locale, ...rest} =',
    '    useI18n(Object.assign(options ?? {',
    `      fallbackLocale: '${baseLocale}'`,
    '    }, {messages: messagesI18n}))',
    '',
    '  const t: I18nCustom = originalT as I18nCustom satisfies I18nCustom',
    '  return {',
    '    ...rest,',
    '    t,',
    '    d,',
    '    n,',
    '    locale,',
    '    availableLocales: supportedLanguages as unknown as string[],',
    '    // i18n: instance',
    '  }',
    '}',
    ''
  );

  return (autogenerated + bodyLines.join(NL)).replace(/\r\n/g, NL).replace(/\r/g, NL).replace(/\n*$/, '\n')
}

/**
 * Emit **pure JS** (no TS annotations, no `as const`).
 * Rollup will replace `import.meta.ROLLUP_FILE_URL_<ref>` in build.
 */
export function createVirtualModuleCode(opts: {
  jsonText: string;
  exportData: boolean;
  buildAssetRefId?: string;
  devUrlPath?: string;
}) {
  const {jsonText, exportData, buildAssetRefId, devUrlPath} = opts;

  const urlExpr = buildAssetRefId
    ? `import.meta.ROLLUP_FILE_URL_${buildAssetRefId}`
    : JSON.stringify(devUrlPath || "/_virtual_locales.json");

  // Pure JS. If you want types, add an ambient .d.ts for "virtual:locales".
  if (exportData) {
    // Inline the data directly in the module
    return `
const url = ${urlExpr};

export async function load() {
  const res = await fetch(url, { credentials: 'same-origin' });
  if (!res.ok) throw new Error('Failed to load locales: ' + res.status);
  return await res.json();
}

export default ${jsonText};
`;
  } else {
    // Don't inline the data, only provide the load function
    return `
const url = ${urlExpr};

export async function load() {
  const res = await fetch(url, { credentials: 'same-origin' });
  if (!res.ok) throw new Error('Failed to load locales: ' + res.status);
  return await res.json();
}

export default undefined;
`;
  }
}
