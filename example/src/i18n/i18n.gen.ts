// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by unplugin-vue-i18n-dts-generation (consts)
// Content-Hash: d2e36bc5

import type {I18n} from 'vue-i18n'
import {
  type ComposerOptions,
  createI18n,
  type Locale,
  type NamedValue,
  type TranslateOptions,
  useI18n,
  type UseI18nOptions
} from 'vue-i18n'
// @ts-expect-error - Virtual module provided by vite-plugin-locale-json
import _messagesI18n from '@unplug-i18n-types-locales'
import type {
  AllTranslationKeysGen,
  AllTranslationsGen,
  SupportedLanguagesGen,
} from './i18n.types.gen'

export const supportedLanguages = ['en'] as const satisfies SupportedLanguagesGen


// Type-safe i18n messages
export const messagesI18n = _messagesI18n as unknown as AllTranslationsGen






/**
 * Creates a type-safe i18n instance with pre-configured messages
 * @param options - Optional I18n configuration (messages will be automatically provided)
 * @returns Configured i18n instance
 */
export function createI18nInstance<T extends Partial<ComposerOptions> >(options?: T): I18n<AllTranslationsGen, T["datetimeFormats"] extends Record<string, unknown> ? T["datetimeFormats"] : {}, T["numberFormats"] extends Record<string, unknown> ? T["numberFormats"] : {}, T["locale"] extends string ? T["locale"] : Locale, false> {
  const i18Options = {
    fallbackLocale: 'en',
    missingWarn: false,
    fallbackWarn: false,
    ...options,
    // Messages are provided and cannot be overridden
    messages: messagesI18n,
    legacy: false
  } as const;
  const i18n = createI18n<false, typeof i18Options, AllTranslationsGen>(i18Options);
  return i18n;
}

export declare interface I18nCustom {
  (key: AllTranslationKeysGen, plural: number, options?: TranslateOptions): string

  (key: AllTranslationKeysGen, options?: TranslateOptions): string

  (key: AllTranslationKeysGen, defaultMsg?: string): string

  (key: AllTranslationKeysGen, defaultMsg: string, options?: TranslateOptions): string

  (key: AllTranslationKeysGen, named: NamedValue, defaultMsg?: string): string

  (key: AllTranslationKeysGen, named: NamedValue, plural?: number): string

  (key: AllTranslationKeysGen, named: NamedValue, options?: TranslateOptions): string
  (key: AllTranslationKeysGen, plural: number, named: NamedValue): string
  (key: AllTranslationKeysGen, plural: number, defaultMsg: string): string
}


export function useI18nTypeSafe(options?: Omit<UseI18nOptions, 'messages'>) {
  // const instance = i18n || createI18nInstance()
  const {t: originalT, d, n, locale, ...rest} =
    useI18n(Object.assign(options ?? {
      fallbackLocale: 'en'
    }, {messages: messagesI18n}))

  const t: I18nCustom = originalT as I18nCustom satisfies I18nCustom
  return {
    ...rest,
    t,
    d,
    n,
    locale,
    availableLocales: supportedLanguages as unknown as string[],
    // i18n: instance
  }
}
